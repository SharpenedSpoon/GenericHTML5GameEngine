// Generated by CoffeeScript 1.7.1

/*
--------------------------------------------
     Begin _drawing-functions.coffee
--------------------------------------------
 */

(function() {
  var Ball, GameObject, KeyCode, Player, awake, beginGameLoop, canvas, context, createGameObjects, drawLine, drawPolygon, drawSquare, drawText, dt, dtStep, fixedUpdate, frame, frames, gameObjects, last, now, render, start, step, timestamp, update,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  drawSquare = function(x, y, w, h, color) {
    if (color == null) {
      color = '#000000';
    }
    context.fillStyle = color;
    context.fillRect(x, y, w, h);
    return null;
  };

  drawLine = function(x1, y1, x2, y2, color) {
    if (color == null) {
      color = '#000000';
    }
    context.beginPath();
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    context.strokeStyle = color;
    context.stroke();
    return null;
  };

  drawPolygon = function(vertexArray, color) {
    var firstVertex, vertex, _i, _len;
    if (color == null) {
      color = '#000000';
    }
    context.beginPath();
    firstVertex = vertexArray[0];
    context.moveTo(firstVertex[0], firstVertex[1]);
    for (_i = 0, _len = vertexArray.length; _i < _len; _i++) {
      vertex = vertexArray[_i];
      context.lineTo(vertex[0], vertex[1]);
    }
    context.lineTo(firstVertex[0], firstVertex[1]);
    context.strokeStyle = color;
    return context.stroke();
  };

  drawText = function(txt, x, y) {
    return context.fillText(txt, x, y);
  };


  /*
  --------------------------------------------
       Begin _game-loop-bootstrap.coffee
  --------------------------------------------
   */

  now = 0;

  dt = 0;

  dtStep = 0;

  last = 0;

  step = 1 / 60;

  frames = 0;

  timestamp = function() {
    return window.performance.now();
  };

  frame = function() {
    frames = 0;
    now = timestamp();
    dt = dt + Math.min(1, (now - last) / 1000);
    dtStep = dt;
    while (dtStep > step) {
      dtStep = dtStep - step;
      frames++;
      fixedUpdate(step);
    }
    update(dt);
    render(dtStep);
    last = now;
    return null;
  };

  beginGameLoop = function() {
    createGameObjects();
    awake();
    start();
    last = timestamp();
    requestAnimationFrame(frame);
    return true;
  };


  /*
  --------------------------------------------
       Begin _KeyCode.coffee
  --------------------------------------------
   */

  KeyCode = {
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    Zero: 48,
    One: 49,
    Two: 50,
    Three: 51,
    Four: 52,
    Five: 53,
    Six: 54,
    Seven: 55,
    Eight: 56,
    Nine: 57,
    Space: 32,
    Tab: 9,
    Delete: 8,
    Enter: 13,
    Shift: 16,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40
  };


  /*
  --------------------------------------------
       Begin _game-object.coffee
  --------------------------------------------
   */

  GameObject = (function() {
    var collisionGroup, enabled, height, id, name, width, x, y;

    name = null;

    x = null;

    y = null;

    width = null;

    height = null;

    id = null;

    enabled = null;

    collisionGroup = null;

    function GameObject(name) {
      this.onCollision = __bind(this.onCollision, this);
      this.onKeyUp = __bind(this.onKeyUp, this);
      this.onKeyDown = __bind(this.onKeyDown, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.fixedUpdate = __bind(this.fixedUpdate, this);
      this.start = __bind(this.start, this);
      this.awake = __bind(this.awake, this);
      this.enabled = true;
      this.collisionGroup = "default";
      this.name = name;
      this.x = 0;
      this.y = 0;
      this.width = 0;
      this.height = 0;
      this.id = gameObjects.length;
      gameObjects.push(this);
    }

    GameObject.prototype.awake = function() {};

    GameObject.prototype.start = function() {};

    GameObject.prototype.fixedUpdate = function(step) {};

    GameObject.prototype.update = function(dt) {};

    GameObject.prototype.render = function(dt) {};

    GameObject.prototype.onKeyDown = function(key) {};

    GameObject.prototype.onKeyUp = function(key) {};

    GameObject.prototype.onCollision = function(other) {};

    return GameObject;

  })();


  /*
  --------------------------------------------
       Begin _input-handling.coffee
  --------------------------------------------
   */

  $(function() {
    $(window).on('keydown', function(e) {
      var o, _i, _len;
      for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
        o = gameObjects[_i];
        if (o.enabled) {
          o.onKeyDown(e.which);
        }
      }
      return null;
    });
    return $(window).on('keyup', function(e) {
      var o, _i, _len;
      for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
        o = gameObjects[_i];
        if (o.enabled) {
          o.onKeyUp(e.which);
        }
      }
      return null;
    });
  });


  /*
  --------------------------------------------
       Begin _engine.coffee
  --------------------------------------------
   */

  canvas = null;

  context = null;

  gameObjects = [];

  $(function() {
    canvas = document.getElementsByTagName('canvas')[0];
    context = canvas.getContext('2d');
    return beginGameLoop();
  });


  /*
  --------------------------------------------
       Begin _game-loop-pong.coffee
  --------------------------------------------
   */

  createGameObjects = function() {
    var ball, p1, p2;
    p1 = new Player("P1");
    p1.keyUp = KeyCode.W;
    p1.keyLeft = KeyCode.A;
    p1.keyRight = KeyCode.D;
    p1.keyDown = KeyCode.S;
    p1.color = "#00ff00";
    p2 = new Player("P2");
    p2.keyUp = KeyCode.Up;
    p2.keyLeft = KeyCode.Left;
    p2.keyRight = KeyCode.Right;
    p2.keyDown = KeyCode.Down;
    p2.color = "#0000ff";
    ball = new Ball("ball");
    console.log('hi');
    return null;
  };

  awake = function() {
    var o, _i, _len;
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      o = gameObjects[_i];
      if (o.enabled) {
        o.awake();
      }
    }
    return null;
  };

  start = function() {
    var o, _i, _len;
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      o = gameObjects[_i];
      if (o.enabled) {
        o.start();
      }
    }
    return null;
  };

  update = function(dt) {
    var o, _i, _len;
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      o = gameObjects[_i];
      if (o.enabled) {
        o.update(dt);
      }
    }
    return null;
  };

  fixedUpdate = function(step) {
    var o, o2, _i, _j, _len, _len1;
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      o = gameObjects[_i];
      if (o.enabled) {
        o.fixedUpdate(step);
        for (_j = 0, _len1 = gameObjects.length; _j < _len1; _j++) {
          o2 = gameObjects[_j];
          if (o2.enabled && o !== o2) {
            if (o.x >= o2.x && o.x <= o2.x + o2.width && o.y >= o2.y && o.y <= o2.y + o2.height) {
              o.onCollision(o2);
            }
          }
        }
      }
    }
    return null;
  };

  render = function(dt) {
    var o, _i, _len;
    context.save();
    context.setTransform(1, 0, 0, 1, 0, 0);
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.restore();
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      o = gameObjects[_i];
      if (o.enabled) {
        o.render(dt);
      }
    }
    return null;
  };


  /*
  --------------------------------------------
       Begin _player-object.coffee
  --------------------------------------------
   */

  Player = (function(_super) {
    var color, hp, keyDown, keyLeft, keyRight, keyUp, keysPressed, maxHealth;

    __extends(Player, _super);

    color = null;

    maxHealth = null;

    hp = null;

    keyUp = null;

    keyDown = null;

    keyLeft = null;

    keyRight = null;

    keysPressed = null;

    function Player(name) {
      this.onCollision = __bind(this.onCollision, this);
      this.onKeyUp = __bind(this.onKeyUp, this);
      this.onKeyDown = __bind(this.onKeyDown, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.awake = __bind(this.awake, this);
      var i, _i;
      Player.__super__.constructor.call(this, name);
      this.color = "#000000";
      this.maxHealth = 10;
      this.hp = this.maxHealth;
      this.keysPressed = [];
      for (i = _i = 1; _i <= 100; i = ++_i) {
        this.keysPressed[i] = false;
      }
      this.collisionGroup = "player";
    }

    Player.prototype.awake = function() {
      this.width = 5;
      this.height = 10;
      return Player.__super__.awake.apply(this, arguments);
    };

    Player.prototype.update = function(dt) {
      var hor, ver;
      hor = 0;
      ver = 0;
      if (this.keysPressed[this.keyRight]) {
        hor += 1;
      }
      if (this.keysPressed[this.keyLeft]) {
        hor -= 1;
      }
      if (this.keysPressed[this.keyDown]) {
        ver += 1;
      }
      if (this.keysPressed[this.keyUp]) {
        ver -= 1;
      }
      this.x += hor;
      this.y += ver;
      return Player.__super__.update.call(this, dt);
    };

    Player.prototype.render = function(dt) {
      drawSquare(this.x, this.y, this.width, this.height, this.color);
      return Player.__super__.render.call(this, dt);
    };

    Player.prototype.onKeyDown = function(key) {
      return this.keysPressed[key] = true;
    };

    Player.prototype.onKeyUp = function(key) {
      return this.keysPressed[key] = false;
    };

    Player.prototype.onCollision = function(other) {};

    return Player;

  })(GameObject);


  /*
  --------------------------------------------
       Begin _pong-ball.coffee
  --------------------------------------------
   */

  Ball = (function(_super) {
    var lastPositions, velocity;

    __extends(Ball, _super);

    velocity = null;

    lastPositions = null;

    function Ball(name) {
      this.onCollision = __bind(this.onCollision, this);
      this.onKeyUp = __bind(this.onKeyUp, this);
      this.onKeyDown = __bind(this.onKeyDown, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.fixedUpdate = __bind(this.fixedUpdate, this);
      this.start = __bind(this.start, this);
      this.awake = __bind(this.awake, this);
      Ball.__super__.constructor.call(this, name);
      this.collisionGroup = "ball";
      this.velocity = {
        x: 1,
        y: 1
      };
      this.name = name;
      this.x = 50;
      this.y = 50;
      this.width = 4;
      this.height = 4;
      this.color = "#000011";
      lastPositions = [];
    }

    Ball.prototype.awake = function() {
      return Ball.__super__.awake.apply(this, arguments);
    };

    Ball.prototype.start = function() {
      return Ball.__super__.start.apply(this, arguments);
    };

    Ball.prototype.fixedUpdate = function(step) {
      return Ball.__super__.fixedUpdate.call(this, step);
    };

    Ball.prototype.update = function(dt) {
      lastPositions.unshift({
        x: this.x,
        y: this.y
      });
      if (lastPositions.length > 100) {
        lastPositions.pop();
      }
      this.x += this.velocity.x;
      this.y += this.velocity.y;
      if (this.x > canvas.width || this.x < 0) {
        this.velocity.x = -1 * this.velocity.x;
        this.x = Math.min(canvas.width, Math.max(0, this.x));
      }
      if (this.y > canvas.height || this.y < 0) {
        this.velocity.y = -1 * this.velocity.y;
        this.y = Math.min(canvas.height, Math.max(0, this.y));
      }
      return Ball.__super__.update.call(this, dt);
    };

    Ball.prototype.render = function(dt) {
      var i, pos, _i, _len;
      drawSquare(this.x, this.y, this.width, this.height, this.color);
      for (i = _i = 0, _len = lastPositions.length; _i < _len; i = ++_i) {
        pos = lastPositions[i];
        drawSquare(pos.x, pos.y, this.width, this.height, "rgba(0,0,0," + ((lastPositions.length - i) / lastPositions.length) + ")");
      }
      return Ball.__super__.render.call(this, dt);
    };

    Ball.prototype.onKeyDown = function(key) {};

    Ball.prototype.onKeyUp = function(key) {};

    Ball.prototype.onCollision = function(other) {};

    return Ball;

  })(GameObject);


  /*
  --------------------------------------------
       Begin pong.coffee
  --------------------------------------------
   */

}).call(this);
